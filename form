/**
 * globals TestUtil
 *
 * Keys = http://definitelytyped.org/docs/angular-protractor--angular-protractor/classes/webdriver.key.html
 */

const _      = require('lodash');
const moment = require('moment');

const {TIME_WAIT} = require('./_constant');

class FormUtil {

	/**
	 * @param model
	 * @description
	 * Counts the number of rows generated by an ng-repeat.
	 */
	static count(model){
		return element.all(by.repeater(model)).count();
	}

	/**
	 * @param model
	 * @returns {Promise.<object>}
	 * @description
	 * Counts the number of rows in accordion
	 */
	static async countAccordion(model){
		const [total]   = await element.all(by.css(model)).getAttribute('data-po-total');
		const [visible] = await element.all(by.css(model)).getAttribute('data-po-visible');
		return {total: parseFloat(total), visible: parseFloat(visible)};
	}

	/**
	 * @param checkbox
	 * @param state - {1 : Checked, 0 : Unchecked}
	 * @description
	 * Checks / Un-checks the checkbox based on the given state.
	 */
	static doCheck(checkbox, state){
		return browser.executeAsyncScript(() =>{
			TestUtil.UI.doCheck(arguments[0], arguments[1], arguments[2]);
		}, checkbox, state);
	}

	/**
	 * @param element
	 * @returns {*}
	 * @description
	 * Moves the mouse over the given element. i.e. Hover.
	 */
	static doHover(element){
		return browser.actions().mouseMove(element).mouseMove({x: 30, y: 38}).doubleClick().perform();
	}

	/**
	 * @param menu - md-menu element
	 * @param index
	 * @returns {Promise}
	 * @description
	 * Helper function to select menu items.
	 * Pass type=1 for single select otherwise defaults to multi select.
	 */
	static async doMenu(menu, index){
		const menuId = await menu.getAttribute('aria-owns');
		await menu.click();
		return element(by.css(`#${menuId} > md-menu-content > md-menu-item:nth-child(${index}) > button`)).click();
	}

	/**
	 * @param inputElement
	 * @param value
	 * @description
	 * Inputs the given value in the field.
	 * Use this function for inputs that haven onChange logic.
	 * The normal protractor send keys will not trigger change consistently.
	 */
	static async doSendKeys(inputElement, value){
		await inputElement.clear();
		return browser.executeAsyncScript(() =>{
			TestUtil.UI.sendKeys(arguments[0], arguments[1], arguments[2]);
		}, inputElement, value);
	}

	/**
	 * @param tabs - md-tabs element
	 * @param index - Starts at 1 and not 0
	 * @description
	 * Switches to the given tab index
	 */
	static doTab(tabs, index){
		return browser.executeAsyncScript(() =>{
			TestUtil.UI.doTab(arguments[0], arguments[1], arguments[2]);
		}, tabs, index);
	}

	/**
	 * @returns {Promise}
	 * @description
	 * Closes the toast message and return the toast message.
	 */
	static async doToast(){
		await browser.wait(protractor.ExpectedConditions.visibilityOf(element(by.css('body > md-toast > div > button'))), TIME_WAIT);
		const text = await element(by.css('body > md-toast > div > span')).getText();
		await element(by.css('body > md-toast > div > button')).click();
		return text && text.trim();
	}

	/**
	 * @param checkbox
	 * @returns {*} - {1: checked, 0: unchecked, 2 : interminate}
	 * @description
	 * Returns the state of the md-checkbox
	 */
	static getChecked(checkbox){
		return browser.executeAsyncScript(() =>{
			TestUtil.UI.getChecked(arguments[0], arguments[1]);
		}, checkbox);
	}

	/**
	 * @param conf
	 * @returns {{cancel: *, help: *, save: *}}
	 * @description
	 * Returns the selectors for the default buttons on an add/edit panel.
	 */
	static getPanelButtons(conf){
		return {
			cancel: element(by.css(`#${conf.addId} md-toolbar button[data-po="close"]`)),
			help  : element(by.css(`#${conf.addId} md-toolbar button[data-po="help"]`)),
			save  : element(by.css(`#${conf.addId} md-toolbar button[data-po="save"]`))
		};
	}

	/**
	 * @param radio
	 * @returns {*}
	 * @description
	 * md-radio-group: returns the active radio button value.
	 */
	static getRadio(radio){
		return browser.executeAsyncScript(() =>{
			TestUtil.UI.getRadio(arguments[0], arguments[1]);
		}, radio);
	}

	/**
	 * @param element
	 * @param value
	 * @param type - ['checkbox', 'radio', 'chips']. Defaults to 'text' input.
	 * @returns {*}
	 * @description
	 * Check if the element has the given value
	 */
	static async isEqual(element, value, type){
		if(type === 'checkbox'){
			const checked = await this.getChecked(element);
			return (value) ? (checked === 1) : (checked === 0);
		} else if(type === 'radio'){
			const val = await this.getRadio(element);
			return (val === value);
		} else if(type === 'number'){
			const val = await element.getAttribute('value');
			return val.replace(/[â‚¹ , %,()-]/g, '') === `${value}`;
		} else if(type === 'time'){
			const elementValue    = element.elementArrayFinder_.locator().value;
			const timeValueNumber = await browser.executeAsyncScript(() =>{
				TestUtil.getTimeStampValue(arguments[0], arguments[1]);
			}, elementValue);
			const val             = moment(timeValueNumber).utc().format('HH:mm');
			return (val.replace(':00.000', '') === `${value}`);
		} else{
			const val = await element.getAttribute('value');
			return (val === `${value}`);
		}
	}

	//TODO @sathyaraj WHY is this function required?
	static trigger(element){
		return browser.executeAsyncScript(() =>{
			TestUtil.UI.triggerIndex(arguments[0], arguments[1]);
		}, element);
	}

	/**
	 * @param menu - md-menu element
	 * @param index
	 * @returns {Promise}
	 * @description
	 * Helper function to select menu items.
	 * Pass type=1 for single select otherwise defaults to multi select.
	 */
	static async doListMenu(menu, index){
		const menuId = await menu.getAttribute('aria-owns');
		await menu.click();
		const menuItem = element(by.css(`#${menuId} > md-menu-content > md-menu-item:nth-child(${index}) > button`));
		await menuItem.click();
		const isPresent = await menuItem.isDisplayed();
		if(isPresent){
			return browser.executeAsyncScript(() =>{
				TestUtil.UI.doMenuClose(arguments[0], arguments[1]);
			}, `#${menuId}`);
		}
	}

	/**
	 * @param key
	 * @param values
	 * @returns {*}
	 * @description
	 * Return an array of translated text for the given translation key.
	 * Note: The translation languages defaults to the language selected in the app currently.
	 */
	static translate(key, values){
		return browser.executeAsyncScript(() =>{
			TestUtil.translate(arguments[0], arguments[1], arguments[2]);
		}, key, values);
	}
}

module.exports = {FormUtil};
